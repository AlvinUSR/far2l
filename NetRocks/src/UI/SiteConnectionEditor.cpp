#include "SiteConnectionEditor.h"
#include "../Globals.h"
#include <KeyFileHelper.h>
#include <algorithm>

/*                                                         62
345                      28         39                   60  64
 ============ Connection site settings ======================
| Display name:          [TEXTEDIT                       ][A]|
| Protocol:              [COMBOBOX                         ] |
| Hostname:              [TEXTEDIT                         ] |
| Port:                  [INTE]                              |
| Login:                 [TEXTEDIT                         ] |
| Password:              [PSWDEDIT                         ] |
| Directory:             [TEXTEDIT                         ] |
|------------------------------------------------------------|
|      [             Protocol settings         ]             |
|  [     Save     ]  [    Connect   ]     [  Cancel      ]   |
 =============================================================
   6              21 24             39    45             60
*/

bool SiteConnectionEditor::Edit()
{

	int result = G.info.DialogEx(G.info.ModuleNumber, -1, -1, _di.EstimateWidth() + 6, _di.EstimateHeight() + 2,
		_di[_i_dblbox].Data, &_di[0], _di.size(), 0, 0, &sDlgProc, (LONG_PTR)(uintptr_t)this);

	if (result == _i_save || result == _i_connect) {
		// TODO: save
	}

	return (result == _i_connect);
}

LONG_PTR WINAPI SiteConnectionEditor::sDlgProc(HANDLE hDlg, int Msg, int Param1, LONG_PTR Param2)
{
	SiteConnectionEditor *it = (SiteConnectionEditor *)G.info.SendDlgMessage(hDlg, DM_GETDLGDATA, 0, 0);
	if (it) {
		return it->DlgProc(hDlg, Msg, Param1, Param2);
	}

	return G.info.DefDlgProc(hDlg, Msg, Param1, Param2);
}

LONG_PTR SiteConnectionEditor::DlgProc(HANDLE hDlg, int Msg, int Param1, LONG_PTR Param2)
{
	if (Msg == DN_BTNCLICK) {
		if (Param1 == _i_display_name_autogen) {
			AutogenerateDisplayName(hDlg);
			return TRUE;
		}
	}
	return G.info.DefDlgProc(hDlg, Msg, Param1, Param2);
}

SiteConnectionEditor::SiteConnectionEditor(const std::string &display_name)
	: _initial_display_name(display_name), _display_name(display_name)
{
	if (!_display_name.empty()) {
		KeyFileHelper kfh(G.config.c_str());
		_initial_protocol = _protocol = kfh.GetString(_display_name.c_str(), "Protocol");
		_host = kfh.GetString(_display_name.c_str(), "Host");
		_initial_port = _port = (unsigned int)kfh.GetInt(_display_name.c_str(), "Port");
		_username = kfh.GetString(_display_name.c_str(), "Username");
		_password = kfh.GetString(_display_name.c_str(), "Password"); // TODO: de/obfuscation
		_directory = kfh.GetString(_display_name.c_str(), "Directory");
		_options = kfh.GetString(_display_name.c_str(), "Options");
	}

	_di_protocols.Add("SFTP");

	if (!_di_protocols.Select(_protocol.c_str())) {
		_di_protocols.Select("SFTP");
	}

	_i_dblbox = _di.Add(DI_DOUBLEBOX, 3,1,64,12, 0, MEditHost);

	_di.Add(DI_TEXT, 5,2,27,2, 0, MDisplayName);
	_i_display_name = _di.Add(DI_EDIT, 28,2,58,2, 0, _display_name.c_str());
	_i_display_name_autogen = _di.Add(DI_BUTTON, 59,2,61,2, 0, "&A");


	_di.Add(DI_TEXT, 5,3,27,3, 0, MProtocol);
	_i_protocol = _di.Add(DI_COMBOBOX, 28,3,62,3, DIF_DROPDOWNLIST | DIF_LISTAUTOHIGHLIGHT | DIF_LISTNOAMPERSAND, "");
	_di[_i_protocol].ListItems = _di_protocols.Get();

	_di.Add(DI_TEXT, 5,4,27,4, 0, MHost);
	_i_host = _di.Add(DI_EDIT, 28,4,62,4, DIF_HISTORY, _host.c_str(), "NetRocks_History_Host");

	_di.Add(DI_TEXT, 5,5,27,5, 0, MPort);
	char sz[32]; itoa(_port, sz, 10);
	_i_port = _di.Add(DI_FIXEDIT, 28,5,33,5, DIF_MASKEDIT, sz, "99999");

	_di.Add(DI_TEXT, 5,6,27,6, 0, MUserName);
	_i_username = _di.Add(DI_EDIT, 28,6,62,6, DIF_HISTORY, _username.c_str(), "NetRocks_History_User");

	_di.Add(DI_TEXT, 5,7,27,7, 0, MPassword);
	_i_password = _di.Add(DI_PSWEDIT, 28,7,62,7, 0, _password.c_str());

	_di.Add(DI_TEXT, 5,8,27,8, 0, MDirectory);
	_i_directory = _di.Add(DI_EDIT, 28,8,62,8, DIF_HISTORY, _directory.c_str(), "NetRocks_History_Dir");

	_di.Add(DI_TEXT, 4,9,63,9, DIF_BOXCOLOR | DIF_SEPARATOR);

	_i_protocol_options = _di.Add(DI_BUTTON, 10,10,50,10, DIF_CENTERGROUP, MProtocolOptions);

	_i_save = _di.Add(DI_BUTTON, 6,11,21,11, DIF_CENTERGROUP, MSave);
	_i_connect = _di.Add(DI_BUTTON, 24,11,39,11, DIF_CENTERGROUP, MConnect, nullptr, true);
	_i_cancel = _di.Add(DI_BUTTON, 45,11,60,11, DIF_CENTERGROUP, MCancel);
}

void SiteConnectionEditor::TextFromDialogControl(HANDLE dlg, int ctl, std::string &str)
{
	static char buf[ 0x1000 ] = {};
	FarDialogItemData dd = { sizeof(buf) - 1, buf };
	LONG_PTR rv = G.info.SendDlgMessage(dlg, DM_GETTEXT, ctl, (LONG_PTR)&dd);
	if (rv > 0 && rv < (LONG_PTR)sizeof(buf))
		buf[rv] = 0;
	str = buf;
}

void SiteConnectionEditor::DataFromDialog(HANDLE dlg)
{
	std::string str;
	TextFromDialogControl(dlg, _i_protocol, _protocol);
	TextFromDialogControl(dlg, _i_display_name, _display_name);
	TextFromDialogControl(dlg, _i_host, _host);
	TextFromDialogControl(dlg, _i_port, str); _port = atoi(str.c_str());
	TextFromDialogControl(dlg, _i_username, _username);
	TextFromDialogControl(dlg, _i_password, _password);
	TextFromDialogControl(dlg, _i_directory, _directory);

//	const char *protocol = _di_protocols.GetSelection();
//	if (protocol)
//		_protocol = protocol;
	//_protocol = _di[_i_protocol].Data;
	//_display_name = _di[_i_display_name].Data;
	//_host = _di[_i_host].Data;
	//_port = atoi(_di[_i_port].Data);
	//_username = _di[_i_username].Data;
	//_password = _di[_i_password].Data;
	//_directory = _di[_i_directory].Data;
	//_options = _di[_i_host].Data;
}

void SiteConnectionEditor::AutogenerateDisplayName(HANDLE dlg)
{
	DataFromDialog(dlg);
	const auto &sections = KeyFileHelper(G.config.c_str()).EnumSections();

	for (unsigned int attempt = 0; attempt < 0x10000000 ;++attempt) {
		std::string str = _protocol;
		str+= "://";
		if (!_username.empty()) {
			str+= _username;
			str+= '@';
		}
		if (!_host.empty()) {
			str+= _host;
		} else {
			str+= "-";
		}
		if (!_directory.empty()) {
//			str+= ':';
			str+= _directory;
		}

		if (str == _display_name)
			return;

		if (str == _initial_display_name) {
			_display_name = _initial_display_name;
			break;
		}

		if (attempt) {
			char attempt_sz[32]; snprintf(attempt_sz, sizeof(attempt_sz) - 1, " (%u)", attempt);
			str+= attempt_sz;
		}

		if (std::find(sections.begin(), sections.end(), str) == sections.end()) {
			_display_name.swap(str);
			break;
		}
	}

	FarDialogItemData dd = { (int)_display_name.size(), (char*)_display_name.c_str() };
	G.info.SendDlgMessage(dlg, DM_SETTEXT, _i_display_name, (LONG_PTR)&dd);
}
